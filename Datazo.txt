// --------------- Definir variables y objetos para llamarlos ------------------

 import './App.css';

 function retornarAleatorio() {
   return Math.trunc(Math.random() * 10);
 }

 function App() {
   const siglo = 21
   const persona = {
     nombre: 'Juan',
     edad: 34
   }
   return (
     <div>
       <h1>Título nivel 1</h1>
       <hr />
       <p>Estamos en el siglo {siglo}</p>
       <h3>Acceso a un objeto</h3>
       <p>{persona.nombre} tiene {persona.edad} años</p>
       <h3>Llamada a un método</h3>
       <p>Un valor aleatorio llamando a un método.</p>
       {retornarAleatorio()}
       <h3>Calculo inmediato de expresiones</h3>
       3 + 3 = {3 + 3}
     </div>
   );
 }

 export default App;


// ----------------------------------------------------------------------

// --------------------Elementos de un array-----------------------------

 import './App.css';

 function retornarAleatorio() {
   return Math.trunc(Math.random() * 10);
 }

 function App() {
   const buscadores = ['http://www.google.com',
     'http://www.bing.com',
     'http://www.yahoo.com'];
   return (
     <div>
       <a href={buscadores[0]}>Google</a><br />
       <a href={buscadores[1]}>Bing</a><br />
       <a href={buscadores[2]}>Yahoo</a><br />
     </div>
   );
 }

// export default App;


---Funciones con parámetros reutilizables-------------------------------------

import './App.css';

function mostrarTitulo(tit) {
return (<h1>
     {tit}
   </h1>);
 }

 function App() {
   return (
     <div>
       {mostrarTitulo('Hola Mundo')}
       {mostrarTitulo('Fin')}
     </div>
   );
 }

 export default App;



//** Importante **

hay que tener en cuenta que los nombres de las propiedades de los elementos HTML cambian en varias situaciones:

Debemos utilizar la palabra 'className' en lugar de class (debido a que class es una palabra clave de Javascript):

<h1 className="recuadro">Titulo 1</h1>
Si el nombre de la propiedad está formada por más de una palabra luego el primer caracter a partir de la segunda palabra debe ir en mayúsculas:

<input type="text" tabIndex="1" />

Para llamar a una función en jsx pongo <Ejemplo/>

function Titulo(props) {

  return (
  <div>
  <h1>{props.titulo}</h1>
  <h2>{props.subtitulo}</h2>
  </div>
  )
}

function App() {
  return (<div>
  <Titulo titulo='Franco' />
  <Titulo subtitulo='te chupo todo' />
  </div>
  )
}

===============================================================================

si pongo rfce me hace un componente con la extensión React Snippet o algo asi.

===============================================================================

El padre nuestro de React es:

Un rerender ocurre cuando se activa un evento, cuando se cambia el estado y cuando hay un cambio en una props. 

Los estados son variables evolucionadas!!

¿Y por qué se genera un Re Render? Porque justamente React lo que hace es renderizar el sitio por partes sin tocar el resto de la aplicación.

===============================================================================

HOOKS

* { UseState } > sirve (por ahora) para salvar un valor en un estado y que al renderizarse no se pierda. 

* { UseEffect } > sirve (por ahora) para que un pedazo de codigo se ejecute despues del montaje, sería hablando en criollo como si dejara un pedazo de codigo abajo de todo, luego del componente que se esta montando o renderizando. 
Si quiero que se ejecute una sola vez, agrego []. Se lo llama array de dependencia.
Si quiero que se ejecuto en algún momento en particular, agrego["Aclaro cuándo"]

=============================================================================

A continuación, un codigo probando un contador y un boton de cambiar estado. Eso sirve para ver como funcionan los hook UseState y UseEffect

import { useEffect } from 'react'
import { useState } from 'react'
import './ItemListContainer.css'

const ItemListContainer = (props) => {

  const [count, setCount] = useState(0)
  const [bool, setBool] = useState(true)

  const sumar = () => {
    setCount(count + 1)
  }

  const cambiarEstado = () =>{
    setBool(!bool)
  }

  useEffect(()=>{
    
    console.log('Se ejecuta siempre por cada render - 1')
    
  })

  useEffect(()=>{
    
    console.log('Esto es una tarea pesada, llamada a API- 2')

  }, [])

  useEffect(()=>{
    
    console.log('Esto es un cambio de estado- 4')
    console.log(bool)

  }, [bool])

  console.log('Esta es otra tarea - 4')
  

  return (<div>

    <div className='saludo'>
      <h2>{props.greeting}</h2>
    </div>

    <div>
      {count}
    </div>

    <div className='btn boton'>
      <button onClick={sumar}> + </button>
    </div>

    <div className='btn boton'>
      <button onClick={cambiarEstado}> Cambiar estado </button>
    </div>
  </div>
  )
}

export default ItemListContainer

--stopPropagation--

Para detener la propagación de un evento debe usar el stopPropagation. Mirar minuto 55 de clase de evento.

--Para evitar el ingreso específico de algún caracter en un input--

(Ejemplo para evitar vocales)

function app(){
  const noVocales = (event) => {
    if ([65,69,73,79,85].includes(event.keyCode)){
      event.preventDeFault();
      console.log(event.Key);
    }
  };

  return (
    <div>
    <input onKeyDown={noVocales}/>
    </div>
  );
  }

---Context---

createContext --> para crear
provider --> proveedor
useContext --> para usar

---Atajo para crear componentes------

Con "rafce" creo un nuevo componente.

Entre la cabecera y el retorno puedo escribir javascrip nativo.

--gFetch--

let product = [{
        ID: '1',
        nombre: 'FUNKO POP SPIDERMAN 287',
        categoria: 'Marvel',
        stock: 100,
        precio: 8000,
        foto: '../public/assets/marvel/spiderman287.jpg'

    }, {
        ID: '2',
        nombre: 'FUNKO POP VIUDA NEGRA 132',
        categoria: 'Marvel',
        stock: 100,
        precio: 7500,
        foto: '../public/assets/marvel/blackwidow132.jpg'

    },
    {
        ID: '3',
        nombre: 'FUNKO POP IRON MAN 626',
        categoria: 'Marvel',
        stock: 100,
        precio: 7500,
        foto: '../public/assets/marvel/ironman626.jpg'
    },
    {
        ID: '4',
        nombre: 'FUNKO POP THOR 69',
        categoria: 'Marvel',
        stock: 100,
        precio: 6000,
        foto: '../public/assets/marvel/thor69.jpg'
    },
    {
        ID: '5',

        nombre: 'FUNKO POP HAWKEYE 1211',
        categoria: 'Marvel',
        stock: 100,
        precio: 6000,
        foto: '../public/assets/marvel/hawkeye1211.jpg'
    },
    {
        ID: '6',
        nombre: 'FUNKO POP CAPITAN AMERICA 288',
        categoria: 'Marvel',
        stock: 100,
        precio: 8000,
        foto: '../public/assets/marvel/capitan288.jpg'
    }, {
        ID: '7',
        nombre: 'FUNKO POP HULK 68',
        categoria: 'Marvel',
        stock: 100,
        precio: 6500,
        foto: '../public/assets/marvel/hulk68.jpg'
    },
    {
        ID: '8',
        nombre: 'FUNKO POP BATMAN 144',
        categoria: 'DC',
        stock: 100,
        precio: 7200,
        foto: '../public/assets/dc/batman144.jpg'
    },
    {
        ID: '9',
        nombre: 'FUNKO POP CATWOMAN 338',
        categoria: 'DC',
        stock: 100,
        precio: 7200,
        foto: '../public/assets/dc/catwoman338.jpg'
    }, {
        ID: '10',
        nombre: 'FUNKO POP THE FLASH 213',
        categoria: 'DC',
        stock: 100,
        precio: 5999,
        foto: '../public/assets/dc/flash213.jpg'
    },
    {
        ID: '11',
        nombre: 'FUNKO POP HARLEY QUINN 54',
        categoria: 'DC',
        stock: 100,
        precio: 5999,
        foto: '../public/assets/dc/harley54.jpg'
    },
    {
        ID: '12',
        nombre: 'FUNKO POP THE JOKER 334',
        categoria: 'DC',
        stock: 100,
        precio: 5999,
        foto: '../public/assets/dc/joker334.jpg'
    },
    {
        ID: '13',
        nombre: 'FUNKO POP SUPERMAN 207',
        categoria: 'DC',
        stock: 100,
        precio: 6999,
        foto: '../public/assets/dc/superman207.jpg'
    },
    {
        ID: '14',
        nombre: 'FUNKO POP WONDER WOMAN 406',
        categoria: 'DC',
        stock: 100,
        precio: 6999,
        foto: '../public/assets/dc/wonder406.jpg'
    },
    {
        ID: '15',
        nombre: 'FUNKO POP TATE LANGDON AHS 168',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/tate168.jpg'
    },
    {
        ID: '16',
        nombre: 'FUNKO POP DAENERYS TARGARYEN GOT 24',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/daenerys24.jpg'
    },
    {
        ID: '17',
        nombre: 'FUNKO POP DARYL DIXON TWD 391',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/daryl391.jpg'
    },
    {
        ID: '18',
        nombre: 'FUNKO POP ELEVEN ST 421',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/eleven421.jpg'
    },
    {
        ID: '19',
        nombre: 'FUNKO POP MEREDITH GREY GA 1074',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/meredith1074.jpg'
    },
    {
        ID: '20',
        nombre: 'FUNKO POP SAWYER LOST 416',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/sawyer416.jpg'
    },
    {
        ID: '21',
        nombre: 'FUNKO POP WALTER WITHE BB 158',
        categoria: 'Series',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/series/walter158.jpg'
    },
    {
        ID: '22',
        nombre: 'FUNKO POP Elliott & ET 1252',
        categoria: 'Peliculas',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/peliculas/elliott1252.jpg'
    },
    {
        ID: '23',
        nombre: 'FUNKO HARRY POTTER 08',
        categoria: 'Peliculas',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/peliculas/harry08.jpg'
    },
    {
        ID: '24',
        nombre: 'FUNKO KING JARETH LABERINTO 364',
        categoria: 'Peliculas',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/peliculas/jareth364.jpg'
    },
    {
        ID: '25',
        nombre: 'FUNKO OBI-WAN KENOBI STAR WARS 270',
        categoria: 'Peliculas',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/peliculas/obi270.jpg'
    },
    {
        ID: '26',
        nombre: 'FUNKO TYLER FIGHT CLUB 919',
        categoria: 'Peliculas',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/peliculas/tyler919.jpg'
    },
    {
        ID: '27',
        nombre: 'FUNKO DARTH VADER STAR WARS 01',
        categoria: 'Peliculas',
        stock: 100,
        precio: 7999,
        foto: '../public/assets/peliculas/vader01.jpg'
    }
]


export const gFetch = (ID) => {

    return new Promise((resuelto, rechazado) => {

        setTimeout(() => {
            resuelto(ID ? product.find(item => item.ID === ID) : product)
        }, 2000)
    })
}

